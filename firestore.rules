rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============ FUNCIONES AUXILIARES ============
    
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si es el propio usuario
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Función para verificar si es maestro
    function isMaestro() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/maestros/$(request.auth.uid));
    }
    
    
    // ============ COLECCIONES PRINCIPALES ============
    
    // Colección de maestros
    match /maestros/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isMaestro();
      allow delete: if false;
    }
    
    // Perfiles ECOCE (índice principal)
    match /ecoce_profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) || isMaestro();
      allow update: if isOwner(userId) || isMaestro();
      allow delete: if isMaestro();
    }
    
    // Perfiles ECOCE por tipo (subcarpetas)
    match /ecoce_profiles/{tipo}/{subtipo}/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) || isMaestro();
      allow update: if isOwner(userId) || isMaestro();
      allow delete: if isMaestro();
    }
    
    // Solicitudes de cuentas
    match /solicitudes_cuentas/{solicitudId} {
      allow create: if true; // Cualquiera puede crear solicitud
      
      // Permitir lectura:
      // 1. Para verificar duplicados sin auth (consultas específicas)
      // 2. Para usuarios autenticados (todas las lecturas)
      allow read: if (
        // Permitir consultas de verificación de duplicados sin auth
        request.auth == null && 
        request.query != null &&
        request.query.limit <= 1
      ) || isAuthenticated();
      
      // Permitir actualizar:
      // 1. Sin autenticación solo para documentos (flujo de registro)
      // 2. Si es maestro (todas las actualizaciones)
      allow update: if (
        // Permitir actualización sin auth solo para documentos
        request.auth == null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['documentos']) 
      ) || isMaestro();
      
      allow delete: if isMaestro();
    }
    
    // ============ LOTES Y TRAZABILIDAD ============
    
    // Colección principal de lotes
    match /lotes/{loteId} {
      // Lectura: usuarios autenticados pueden leer cualquier lote
      // (la app filtra por proceso_actual y otros campos)
      allow read: if isAuthenticated();
      
      // Crear: solo usuarios autenticados
      allow create: if isAuthenticated();
      
      // Actualizar: usuarios autenticados
      allow update: if isAuthenticated();
      
      // Eliminar: nunca
      allow delete: if false;
      
      // Subcolecciones dentro de lotes
      match /{document=**} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated();
        allow delete: if false;
      }
    }
    
    // ============ CONSULTAS AGREGADAS (COLLECTION GROUP) ============
    
    // CRÍTICO: Permitir consultas de collectionGroup para datos_generales
    match /{path=**}/datos_generales/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Permitir consultas de collectionGroup para procesos
    match /{path=**}/reciclador/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    match /{path=**}/origen/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    match /{path=**}/transporte/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    match /{path=**}/transformador/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    match /{path=**}/laboratorio/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    match /{path=**}/analisis_laboratorio/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // ============ TRANSPORTE Y ENTREGAS ============
    
    // Cargas de transporte
    match /cargas_transporte/{cargaId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Entregas de transporte
    match /entregas_transporte/{entregaId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // ============ SISTEMA INDEPENDIENTE DE MUESTRAS DE LABORATORIO (NUEVO) ============
    
    // NUEVA COLECCIÓN: muestras_laboratorio
    // Sistema independiente para resolver problemas de permisos y escalabilidad
    match /muestras_laboratorio/{muestraId} {
      // Funciones auxiliares locales
      function isMuestraOwner() {
        return resource.data.laboratorio_id == request.auth.uid;
      }
      
      function isAdmin() {
        return exists(/databases/$(database)/documents/ecoce_profiles/maestro/usuarios/$(request.auth.uid));
      }
      
      // LECTURA: Permitir lectura si está autenticado
      // La seguridad se garantiza porque:
      // 1. La app siempre filtra por laboratorio_id en las consultas
      // 2. Solo se pueden crear muestras con tu propio laboratorio_id
      // 3. Las consultas where('laboratorio_id', '==', uid) solo devuelven tus muestras
      allow read: if isAuthenticated();
      
      // CREACIÓN: Solo laboratorios autenticados pueden crear sus propias muestras
      allow create: if isAuthenticated() &&
        // El laboratorio_id debe ser el mismo que el usuario autenticado
        request.resource.data.laboratorio_id == request.auth.uid &&
        // Campos requeridos
        request.resource.data.keys().hasAll(['laboratorio_id', 'origen_id', 'origen_tipo', 'peso_muestra', 'estado']) &&
        // Estado inicial debe ser pendiente_analisis
        request.resource.data.estado == 'pendiente_analisis';
      
      // ACTUALIZACIÓN: Solo el dueño puede actualizar su muestra
      allow update: if isAuthenticated() && isMuestraOwner() && (
        // Validar transiciones de estado correctas
        // De pendiente_analisis a analisis_completado
        (request.resource.data.estado == 'analisis_completado' && 
         resource.data.estado == 'pendiente_analisis') ||
        // De analisis_completado a documentacion_completada
        (request.resource.data.estado == 'documentacion_completada' && 
         resource.data.estado == 'analisis_completado') ||
        // Permitir actualización del mismo estado (para agregar datos)
        (request.resource.data.estado == resource.data.estado)
      );
      
      // ELIMINACIÓN: No permitida para mantener historial completo
      allow delete: if false;
    }
    
    // ============ TRANSFORMACIONES Y SUBLOTES - REGLAS ACTUALIZADAS ============
    
    // Reglas para transformaciones (megalotes) - ACTUALIZADO PARA SISTEMA INDEPENDIENTE
    match /transformaciones/{transformacionId} {
      // Funciones auxiliares locales
      function isTransformacionOwner() {
        return resource.data.usuario_id == request.auth.uid;
      }
      
      function isLaboratorio() {
        return exists(/databases/$(database)/documents/ecoce_profiles/laboratorio/usuarios/$(request.auth.uid));
      }
      
      // LECTURA: Permitir a usuarios autenticados
      // Necesario para que el laboratorio pueda verificar existencia de transformación
      allow read: if isAuthenticated();
      
      // CREAR: Mantener reglas existentes
      allow create: if isAuthenticated() &&
        request.resource.data.usuario_id == request.auth.uid &&
        request.resource.data.keys().hasAll(['usuario_id', 'usuario_folio', 'tipo', 'fecha_inicio']);
      
      // ACTUALIZAR: Permitir al dueño o laboratorio con campos específicos
      allow update: if isAuthenticated() && (
        // El dueño puede actualizar todo
        isTransformacionOwner() ||
        // NUEVO: Laboratorio puede actualizar campos del sistema independiente
        (isLaboratorio() && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'muestras_laboratorio_ids', 
           'tiene_muestra_laboratorio', 
           'peso_muestras_total', 
           'peso_disponible'
         ])) ||
        // Compatibilidad con sistema anterior (array muestras_laboratorio)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'muestras_laboratorio', 
          'tiene_muestra_laboratorio', 
          'ultima_actualizacion', 
          'peso_disponible'
        ]))
      );
      
      // ELIMINAR: Solo el dueño
      allow delete: if isAuthenticated() && isTransformacionOwner();
      
      // Subcollección datos_generales de transformaciones
      match /datos_generales/{doc} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated();
        
        allow update: if isAuthenticated() && (
          isTransformacionOwner() ||
          // Laboratorio puede actualizar campos específicos
          (isLaboratorio() && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly([
             'muestras_laboratorio_ids', 
             'tiene_muestra_laboratorio', 
             'peso_muestras_total', 
             'peso_disponible'
           ]))
        );
        
        allow delete: if false;
      }
    }
    
    // Sublotes
    match /sublotes/{subloteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // ============ COLECCIONES LEGACY ============
    
    // Lotes por tipo de usuario (para compatibilidad)
    match /lotes_origen/{loteId} {
      allow read, write: if isAuthenticated();
    }
    
    match /lotes_transportista/{loteId} {
      allow read, write: if isAuthenticated();
    }
    
    match /lotes_reciclador/{loteId} {
      allow read, write: if isAuthenticated();
    }
    
    match /lotes_laboratorio/{loteId} {
      allow read, write: if isAuthenticated();
    }
    
    match /lotes_transformador/{loteId} {
      allow read, write: if isAuthenticated();
    }
    
    // ============ OTRAS COLECCIONES ============
    
    // Usuarios pendientes de eliminación
    match /users_pending_deletion/{userId} {
      allow read: if isMaestro();
      allow create: if isMaestro();
      allow update: if isMaestro();
      allow delete: if isMaestro();
    }
    
    // Logs de auditoría
    match /audit_logs/{logId} {
      allow read: if isMaestro();
      allow create: if isMaestro(); // Permitir que maestros creen logs
      allow update: if false; // No se pueden actualizar logs
      allow delete: if false; // No se pueden eliminar logs
    }
    
    // ============ REGLA TEMPORAL DE DEPURACIÓN ============
    // IMPORTANTE: Remover después de confirmar que funciona
    
    // Regla temporal para depuración - permite todas las operaciones en transformaciones
    // match /transformaciones/{document=**} {
    //   allow read, write: if isAuthenticated();
    // }
  }
}